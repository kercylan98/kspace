// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DalUserClient is the client API for DalUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DalUserClient interface {
	// 创建一个用户
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*CreateReply, error)
	// 创建多个用户
	CreateMultiple(ctx context.Context, in *MultipleUser, opts ...grpc.CallOption) (*CreateMultipleReply, error)
	// 获取一个用户
	Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// 验证密码是否正确
	VerifyPassword(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
}

type dalUserClient struct {
	cc grpc.ClientConnInterface
}

func NewDalUserClient(cc grpc.ClientConnInterface) DalUserClient {
	return &dalUserClient{cc}
}

func (c *dalUserClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/rpc.DalUser/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dalUserClient) CreateMultiple(ctx context.Context, in *MultipleUser, opts ...grpc.CallOption) (*CreateMultipleReply, error) {
	out := new(CreateMultipleReply)
	err := c.cc.Invoke(ctx, "/rpc.DalUser/CreateMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dalUserClient) Get(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/rpc.DalUser/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dalUserClient) VerifyPassword(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/rpc.DalUser/VerifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DalUserServer is the server API for DalUser service.
// All implementations must embed UnimplementedDalUserServer
// for forward compatibility
type DalUserServer interface {
	// 创建一个用户
	Create(context.Context, *User) (*CreateReply, error)
	// 创建多个用户
	CreateMultiple(context.Context, *MultipleUser) (*CreateMultipleReply, error)
	// 获取一个用户
	Get(context.Context, *User) (*User, error)
	// 验证密码是否正确
	VerifyPassword(context.Context, *User) (*User, error)
	mustEmbedUnimplementedDalUserServer()
}

// UnimplementedDalUserServer must be embedded to have forward compatible implementations.
type UnimplementedDalUserServer struct {
}

func (UnimplementedDalUserServer) Create(context.Context, *User) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDalUserServer) CreateMultiple(context.Context, *MultipleUser) (*CreateMultipleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiple not implemented")
}
func (UnimplementedDalUserServer) Get(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDalUserServer) VerifyPassword(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPassword not implemented")
}
func (UnimplementedDalUserServer) mustEmbedUnimplementedDalUserServer() {}

// UnsafeDalUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DalUserServer will
// result in compilation errors.
type UnsafeDalUserServer interface {
	mustEmbedUnimplementedDalUserServer()
}

func RegisterDalUserServer(s grpc.ServiceRegistrar, srv DalUserServer) {
	s.RegisterService(&DalUser_ServiceDesc, srv)
}

func _DalUser_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DalUserServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DalUser/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DalUserServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DalUser_CreateMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DalUserServer).CreateMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DalUser/CreateMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DalUserServer).CreateMultiple(ctx, req.(*MultipleUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _DalUser_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DalUserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DalUser/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DalUserServer).Get(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DalUser_VerifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DalUserServer).VerifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DalUser/VerifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DalUserServer).VerifyPassword(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// DalUser_ServiceDesc is the grpc.ServiceDesc for DalUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DalUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DalUser",
	HandlerType: (*DalUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DalUser_Create_Handler,
		},
		{
			MethodName: "CreateMultiple",
			Handler:    _DalUser_CreateMultiple_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DalUser_Get_Handler,
		},
		{
			MethodName: "VerifyPassword",
			Handler:    _DalUser_VerifyPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cmd/kspace-dal/src/rpc/user.proto",
}
