// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DalOAuth2Client is the client API for DalOAuth2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DalOAuth2Client interface {
	CreateClient(ctx context.Context, in *AuthClient, opts ...grpc.CallOption) (*AuthClient, error)
	GetClientWithClientID(ctx context.Context, in *AuthClient, opts ...grpc.CallOption) (*AuthClient, error)
}

type dalOAuth2Client struct {
	cc grpc.ClientConnInterface
}

func NewDalOAuth2Client(cc grpc.ClientConnInterface) DalOAuth2Client {
	return &dalOAuth2Client{cc}
}

func (c *dalOAuth2Client) CreateClient(ctx context.Context, in *AuthClient, opts ...grpc.CallOption) (*AuthClient, error) {
	out := new(AuthClient)
	err := c.cc.Invoke(ctx, "/rpc.DalOAuth2/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dalOAuth2Client) GetClientWithClientID(ctx context.Context, in *AuthClient, opts ...grpc.CallOption) (*AuthClient, error) {
	out := new(AuthClient)
	err := c.cc.Invoke(ctx, "/rpc.DalOAuth2/GetClientWithClientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DalOAuth2Server is the server API for DalOAuth2 service.
// All implementations must embed UnimplementedDalOAuth2Server
// for forward compatibility
type DalOAuth2Server interface {
	CreateClient(context.Context, *AuthClient) (*AuthClient, error)
	GetClientWithClientID(context.Context, *AuthClient) (*AuthClient, error)
	mustEmbedUnimplementedDalOAuth2Server()
}

// UnimplementedDalOAuth2Server must be embedded to have forward compatible implementations.
type UnimplementedDalOAuth2Server struct {
}

func (UnimplementedDalOAuth2Server) CreateClient(context.Context, *AuthClient) (*AuthClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedDalOAuth2Server) GetClientWithClientID(context.Context, *AuthClient) (*AuthClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientWithClientID not implemented")
}
func (UnimplementedDalOAuth2Server) mustEmbedUnimplementedDalOAuth2Server() {}

// UnsafeDalOAuth2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DalOAuth2Server will
// result in compilation errors.
type UnsafeDalOAuth2Server interface {
	mustEmbedUnimplementedDalOAuth2Server()
}

func RegisterDalOAuth2Server(s grpc.ServiceRegistrar, srv DalOAuth2Server) {
	s.RegisterService(&DalOAuth2_ServiceDesc, srv)
}

func _DalOAuth2_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DalOAuth2Server).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DalOAuth2/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DalOAuth2Server).CreateClient(ctx, req.(*AuthClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _DalOAuth2_GetClientWithClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DalOAuth2Server).GetClientWithClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DalOAuth2/GetClientWithClientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DalOAuth2Server).GetClientWithClientID(ctx, req.(*AuthClient))
	}
	return interceptor(ctx, in, info, handler)
}

// DalOAuth2_ServiceDesc is the grpc.ServiceDesc for DalOAuth2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DalOAuth2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DalOAuth2",
	HandlerType: (*DalOAuth2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _DalOAuth2_CreateClient_Handler,
		},
		{
			MethodName: "GetClientWithClientID",
			Handler:    _DalOAuth2_GetClientWithClientID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/cmd/kspace-dal/src/rpc/oauth2.proto",
}
