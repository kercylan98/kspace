package main

//go:generate go run generate.go

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

func main() {

	var content = "// Code generated by gen/generate.go. DO NOT EDIT.\npackage gen\n\n"

	fs, err := ioutil.ReadDir("protobuf/mixin")
	if err != nil {
		panic(err)
	}

	for _, f := range fs {
		if !f.IsDir() && strings.HasSuffix(f.Name(), ".proto") {
			content += `//go:generate protoc --proto_path=../protobuf --proto_path=../protobuf/mixin --go_out=../dal --go-grpc_out=../dal --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative ../protobuf/mixin/` +
				f.Name() + "\n"
			fmt.Println("found proto mixin file:", "./protobuf/mixin/"+f.Name())
		}
	}

	fs, err = ioutil.ReadDir("protobuf")
	if err != nil {
		panic(err)
	}

	for _, f := range fs {
		if !f.IsDir() && strings.HasSuffix(f.Name(), ".proto") {
			content += `//go:generate protoc --proto_path=../protobuf --proto_path=../protobuf/mixin --go_out=../dal --go-grpc_out=../dal --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative ../protobuf/` +
				f.Name() + "\n"
			fmt.Println("found proto file:", "./protobuf/"+f.Name())
		}
	}

	write(filepath.Join("gen", "generate.go"), content+"\n")
}

func write(fileName string, content string) {
	f, err := os.OpenFile(fileName, os.O_WRONLY|os.O_TRUNC|os.O_CREATE, 0644)
	if err != nil {
		panic(err)
	} else {
		n, _ := f.Seek(0, os.SEEK_END)
		_, err = f.WriteAt([]byte(content), n)
		defer f.Close()
	}
}
